@page "/house/owners/{Id:int}"
@using Radzen;
@inject IJSRuntime _JS
@inject DialogService DialogService

@* @inject IRegionRepository _regionRepository *@
@inject IHouseRepository _houseRepository
@inject IOwnerRepository _ownersRepository

<h3 class="card-title text-primary mb-3 ml-3">Владельцы дома</h3>
@if (IsLoading)
{
    <div class="text-center">
        <img src="images/loading.gif" />
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>Лот: @house.Lot</h4>
                Адрес: @house.Address<br />
                @* Регион: @Regions.Where(x => x.Id == house.RegionId)?.FirstOrDefault()?.Nm<br /><hr /> *@
                Регион: @house.Region?.Nm<hr />
                Примечание: <span>@((MarkupString)(house.Notes ?? string.Empty))</span>
            </div>
        </div>
        <div class="col-1">
            <img src="@house.ImageUrl" class="w-100" />
        </div>
    </div>

    <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add_circle_outline" class="mt-2 mb-4" Text="Новый владелец" Click="@InsertRow" Disabled=@(ownerToInsert != null || ownerToUpdate != null) />
    <RadzenDataGrid 
        @ref="grid" 
        Data="@Owners" 
        TItem="Owner" 
        EditMode="DataGridEditMode.Single" 
        RowUpdate="@OnUpdateRow" 
        RowCreate="@OnCreateRow"
        AllowFiltering="true"
        AllowSorting="true"
        OrOperatorText="ИЛИ" 
        AndOperatorText="И" 
        EqualsText="Равно" 
        ContainsText="Содержит" 
        ClearFilterText="Сброс" 
        ApplyFilterText="ОК"
        FilterText="Фильтр"
        AllowPaging="true" 
        PageSize="5" 
        PageNumbersCount="2" 
        Sort="@Reset" 
        Filter="@Reset" 
        Page="@Reset">
        <Columns>
            <RadzenDataGridColumn TItem="Owner" Property="Id" Title="Id" Width="120px" SortOrder="SortOrder.Descending">
                <Template Context="owner">
                    @(owner.Id > 0 ? owner.Id.ToString() : string.Empty)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Owner" Property="Fio" Title="Ф.И.О." Width="200px">
                <EditTemplate Context="owner">
                    <RadzenTextBox @bind-Value="owner.Fio" Style="width:100%; display: block" Name="Fio" />
                    <RadzenRequiredValidator Text="Заполните Ф.И.О." Component="Fio" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Owner" Property="StartTitul" Title="Начало" FormatString="{0:d}" Width="160px">
                <EditTemplate Context="owner">
                    <RadzenDatePicker @bind-Value="owner.StartTitul" Name="StartTitul" DateFormat="dd.MM.yyyy" Style="width:100%" />
                    <RadzenRequiredValidator Text="Заполните Начало" Component="StartTitul" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Owner" Property="EndTitul" Title="Окончание" FormatString="{0:d}" Width="160px">
                <EditTemplate Context="owner">
                    <RadzenDatePicker @bind-Value="owner.EndTitul" DateFormat="dd.MM.yyyy" Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Owner" Property="TypeTitul" Title="Вид" Width="160px" >
                <EditTemplate Context="owner">
                    <RadzenDropDown @bind-Value="owner.TypeTitul" Name="TypeTitul" Data="@TypeTitulList" Style="width:100%; display: block;" />
                    <RadzenRequiredValidator Text="Заполните Вид" Component="TypeTitul" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Owner" Property="NumTitul" Title="Номер свидетельства" Width="160px">
                <EditTemplate Context="owner">
                    <RadzenTextBox @bind-Value="owner.NumTitul" Style="width:100%; display: block" Name="NumTitul" />
                    <RadzenRequiredValidator Text="Заполните Номер" Component="NumTitul" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Owner" Context="owner" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="owner">
                    <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="@(args => EditRow(owner))">
                    </RadzenButton>
                    <RadzenButton Icon="delete" Size="ButtonSize.Medium" Click="@(args => DeleteRow(owner))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="owner">
                    <RadzenButton Icon="check" Size="ButtonSize.Medium" Click="@((args) => SaveRow(owner))">
                    </RadzenButton>
                    <RadzenButton Icon="close" Size="ButtonSize.Medium" Click="@((args) => CancelEdit(owner))">
                    </RadzenButton>
                    <RadzenButton Icon="delete" Size="ButtonSize.Medium" Click="@(args => DeleteRow(owner))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private House house { get; set; } = new();
    // private IEnumerable<Region> Regions { get; set; } = new List<Region>();
    private IEnumerable<Owner> Owners { get; set; } = new List<Owner>();
    private bool IsLoading { get; set; } = true;
    IEnumerable<string> TypeTitulList = new List<string>()
    {
        "Собственность", "Долевая собственность. 1/2 доли", "Долевая собственность. 1/3 доли", "Долевая собственность. 2/3 доли"
    };
    RadzenDataGrid<Owner>? grid;
    Owner? ownerToUpdate;
    Owner? ownerToInsert;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            house = await _houseRepository.Get(Id);
            house.ImageUrl = string.IsNullOrEmpty(house.ImageUrl) ? "/images/default.png" : house.ImageUrl;
            // Regions = await _regionRepository.GetAll();
            Owners = await _ownersRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    async Task EditRow(Owner owner)
    {
        ownerToUpdate = new Owner()
        {
            Id = owner.Id,
            Fio = owner.Fio,
            StartTitul = owner.StartTitul,
            TypeTitul = owner.TypeTitul,
            NumTitul = owner.NumTitul,
            EndTitul = owner.EndTitul,
            HouseId = owner.HouseId
        };
        if (grid != null) await grid.EditRow(owner);
    }

    async Task SaveRow(Owner owner)
    {
        if (grid != null) await grid.UpdateRow(owner);
    }

    void ReturnOwner()
    {
        if (ownerToUpdate != null)
        {
            Owners.Where(p => p.Id == ownerToUpdate.Id).ToList().ForEach(x =>
            {
                x.Fio = ownerToUpdate.Fio;
                x.StartTitul = ownerToUpdate.StartTitul;
                x.TypeTitul = ownerToUpdate.TypeTitul;
                x.NumTitul = ownerToUpdate.NumTitul;
                x.EndTitul = ownerToUpdate.EndTitul;
            });
        }
    }

    void Reset()
    {
        ownerToInsert = null;
        ownerToUpdate = null;
    }

    void CancelEdit(Owner owner)
    {
        ReturnOwner();
        Reset();
        if (grid != null) grid.CancelEditRow(owner);
    }

    private async Task SweetAlertFailure(string msg)
    {
        await _JS.InvokeVoidAsync("ShowSweetAlert", "error", msg);
    }

    async Task OnUpdateRow(Owner owner)
    {
        try
        {
            await _ownersRepository.Update(owner);
        }
        catch (Exception ex)
        {
            await SweetAlertFailure(ex.Message);
            ReturnOwner();
        }
        Reset();
        if (grid != null) await grid.Reload();
    }

    async Task InsertRow()
    {
        if (grid != null)
        {
            ownerToInsert = new Owner() { Id = 0, StartTitul = DateTime.Now.Date, HouseId = Id };
            await grid.InsertRow(ownerToInsert);
        }
    }

    async Task OnCreateRow(Owner owner)
    {
        try
        {
            var newOwner = await _ownersRepository.Create(owner);
            ((List<Owner>)Owners).Add(newOwner);
        }
        catch (Exception ex)
        {
            await SweetAlertFailure(ex.Message);
        }
        ownerToInsert = null;
        if (grid != null) await grid.Reload();
    }

    async Task DeleteRow(Owner owner)
    {
        if (Owners.Contains(owner))
        {
            try
            {
                var IsDel = await Confirm("Удалить запись?");
                if (IsDel)
                {
                    await _ownersRepository.Delete(owner.Id);
                    ((List<Owner>)Owners).RemoveAll(x => x.Id == owner.Id);
                }
            }
            catch (Exception ex)
            {
                await SweetAlertFailure(ex.Message);
            }
            if (grid != null) await grid.Reload();
        }
        else
        {
            if (grid != null) await grid.Reload();
        }
        Reset();
    }

    async Task<bool> Confirm(string message)
    {
        var result = await DialogService.Confirm(message, "Внимание", new ConfirmOptions() { OkButtonText = "Да", CancelButtonText = "Нет" });
        return result ?? false;
    }
}