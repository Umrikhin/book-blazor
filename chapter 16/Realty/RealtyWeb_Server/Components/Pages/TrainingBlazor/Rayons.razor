@page "/rayons"
<h3>Районы</h3>
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Наименование</th>
            <th>Площадь</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize Context="row" ItemsProvider="@LoadRayons">
            <ItemContent>
                <tr>
                    <td>@row.Id</td>
                    <td>@row.Nm</td>
                    <td>@row.Square</td>
                </tr>
            </ItemContent>
            <Placeholder>
                <p>Загрузка районов, подождите...</p>
            </Placeholder>
        </Virtualize>
    </tbody>
</table>

@code {
    private List<Rayon>? _rayons;
    protected override async Task OnInitializedAsync()
    {
        _rayons = await MakeTenThousandRayons();
    }
    private async Task<List<Rayon>> MakeTenThousandRayons()
    {
        List<Rayon> myRayonList = new List<Rayon>();

        for (int i = 0; i < 10000; i++)
        {
            var rayon = new Rayon()
                {
                    Id = Guid.NewGuid(),
                    Nm = $"Rayon {i}",
                    Square = i * 100
                };

            myRayonList.Add(rayon);
        }
        await Task.Delay(100);
        return await Task.FromResult(myRayonList);
    }
    private async ValueTask<ItemsProviderResult<Rayon>> LoadRayons(ItemsProviderRequest request)
    {
        var rayons = await MakeTenThousandRayons();
        return new ItemsProviderResult<Rayon>(rayons.Skip(request.StartIndex).Take(request.Count), rayons.Count());
    }
    public class Rayon
    {
        public Guid Id { get; set; }
        public string? Nm { get; set; }
        public int Square { get; set; }
    }
}
