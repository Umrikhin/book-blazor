@page "/region/create"
@page "/region/edit/{Id:int}"

@inject IRegionRepository _regionRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _JS

<div class="row my-2">
    <h3 class="card-title text-primary mb-3">@Caption регион</h3>
    <div class="col-12">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="region" OnValidSubmit="ModifyRegion">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label>Наименование</label>
                    <ValidationMessage For="()=>region.Nm"></ValidationMessage>
                    <InputText @bind-Value="region.Nm" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <label>Код ГИБДД</label>
                    <ValidationMessage For="()=>region.GIBDD"></ValidationMessage>
                    <InputText @bind-Value="region.GIBDD" @oninput="HandleInputGIBDD" class="form-control" maxlength="2"></InputText>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Caption</button>
                    <NavLink href="region" class="btn btn-secondary">Назад к списку</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private Region region { get; set; } = new Region();
    private string Caption { get; set; } = "Добавить";
    private bool IsLoading { get; set; } = true;

    private void HandleInputGIBDD(ChangeEventArgs e)
    {
        region.GIBDD = e.Value as string;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            //Добавление
            IsLoading = false;
        }
        else
        {
            //Обновление
            Caption = "Обновить";
            await LoadRegion();
        }
    }

    private async Task LoadRegion()
    {
        region = await _regionRepository.Get(Id);
        IsLoading = false;
    }

    private async Task ModifyRegion()
    {
        try
        {
            if (region.Id == 0)
            {
                await _regionRepository.Create(region);
            }
            else
            {
                await _regionRepository.Update(region);
            }
            _navigationManager.NavigateTo("region");
        }
        catch (Exception ex)
        {
            await SweetAlertFailure(ex.Message);
        }
    }
    private async Task SweetAlertFailure(string msg)
    {
        await _JS.InvokeVoidAsync("ShowSweetAlert", "error", msg);
    }
}